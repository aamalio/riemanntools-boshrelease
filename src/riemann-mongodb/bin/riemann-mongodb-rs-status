#!/usr/bin/env ruby

# Gathers MongoDB replSetGetStatus command output (rs.status() from the shell) and submits them to Riemann.

require 'riemann/tools'

class Riemann::Tools::Mongo
  include Riemann::Tools
  require 'mongo'

  opt :host_prefix, "Prefix for event_host", :default => ''
  opt :mongo_host, "Mongo hostname", :default => 'localhost'
  opt :mongo_port, "Mongo port", :default => 27017
  opt :mongo_db, "Mongo database", :default => 'admin'

  def initialize
    @db = ::Mongo::MongoClient.new(opts[:mongo_host], opts[:mongo_port]).db(opts[:mongo_db])
    @cmd = {"replSetGetStatus"=>1}
    @path = []
    @all_values = {}
  end

  def get_all_values_nested(nested_hash={})
    nested_hash.each_pair do |k,v|
      @path << k
      case v
        when Hash then get_all_values_nested(v)
        when Array then get_all_values_nested(Hash[v.map.with_index {|x,i| [i, x] }])
        else
          @all_values.merge!({"mongodb rs #{@path.join(" ")}" => "#{v}"})
          @path.pop
      end
    end
    @path.pop
    return @all_values
  end

  def tick
    begin
      response = @db.command(@cmd)
    rescue => e
      report(
        :host    => opts[:host_prefix] + opts[:mongo_host].dup,
        :service => "mongodb health",
        :description => "Connection error: #{e.class} - #{e.message}"
      )
    end

    return if response.nil?

    report(
      :host    => opts[:host_prefix] + opts[:mongo_host].dup,
      :service => "mongodb health",
      :state   => "ok",
      :description => "mongodb connection status ok"
    )

    metrics = get_all_values_nested(response)
    metrics.each do |metric, value|
      report(
        :host    => opts[:host_prefix] + opts[:mongo_host].dup,
        :service => metric,
        :metric  => value.to_s,
        :state   => "ok",
        :tags    => ["mongodb"]
      )
    end
  end
end

Riemann::Tools::Mongo.run
