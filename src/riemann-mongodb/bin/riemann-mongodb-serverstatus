#!/usr/bin/env ruby

# Runs serverStatus command, or db.serverStatus() from the shell and send metrics to riemann.

require 'riemann/tools'

class Riemann::Tools::Mongo
  include Riemann::Tools
  require 'mongo'

  opt :mongo_host, "Mongo hostname", :default => 'localhost'
  opt :mongo_port, "Mongo port", :default => 27017
  opt :mongo_db, "Mongo database", :default => 'local'

  def initialize
  	@db = ::Mongo::MongoClient.new(opts[:mongo_host], opts[:mongo_port]).db(opts[:mongo_db])
  	@cmd = {"serverStatus"=>1}
    @path = []
    @all_values = {}
  end

  def get_all_values_nested(nested_hash={})
    nested_hash.each_pair do |k,v|
      @path << k
      case v
        when Hash then get_all_values_nested(v)
        when Array then get_all_values_nested(Hash[v.map.with_index {|x,i| [i,x]}])
        else
          if v.is_a? TrueClass
            v = 1
          elsif v.is_a? FalseClass
            v = 0
          end
          if (v.is_a? Numeric)
            @all_values.merge!({"mongodb server #{@path.join(" ")}" => v.to_f})
          end
          @path.pop
      end
    end
    @path.pop
    return @all_values
  end

  def tick
    begin
      response = @db.command(@cmd)
    rescue => e
      report(
        :host    => opts[:mongo_host].dup,
        :service => "mongodb health",
        :state   => "critical",
        :tags    => ["mongodb"],
        :description => "Connection error: #{e.class} - #{e.message}"
      )
    end

    return if response.nil?

    report(
      :host    => opts[:mongo_host].dup,
      :service => "mongodb health",
      :state   => "ok",
      :tags    => ["mongodb"],
      :description => "mongodb connection status ok"
    )

    metrics = get_all_values_nested(response)
    metrics.each do |metric, value|
      report(
        :host        => opts[:mongo_host].dup,
        :service     => metric,
        :metric      => value.to_f,
        :state       => "ok",
        :tags        => ["mongodb"],
        :description => ""
      )
    end

    # lock_percentage => (lockTime / totalTime) * 100
    lockPercentage = ((metrics['mongodb server globalLock lockTime'].to_f / metrics['mongodb server globalLock totalTime'].to_f) * 100)
    if !lockPercentage.is_a? Numeric
      lockPercentage=0
    end
    report(
      :host    => opts[:mongo_host].dup,
      :service => "mongodb server globalLock lockPercentage",
      :metric  => lockPercentage.to_f,
      :state   => "ok",
      :tags    => ["mongodb"],
      :description => ""
    )


    # Non Mapped Virtual Memory => (virtual / mapped) or mappedWithJournal?
    nonMappedVirtualMemory = (metrics['mongodb server mem virtual'].to_f / metrics['mongodb server mem mapped'].to_f)
    if !nonMappedVirtualMemory.is_a? Numeric
      nonMappedVirtualMemory=0
    end
    report(
      :host    => opts[:mongo_host].dup,
      :service => "mongodb server mem nonMappedVirtualMemory",
      :metric  => nonMappedVirtualMemory.to_f,
      :state   => "ok",
      :tags    => ["mongodb"],
      :description => ""
    )
  end
end

Riemann::Tools::Mongo.run
